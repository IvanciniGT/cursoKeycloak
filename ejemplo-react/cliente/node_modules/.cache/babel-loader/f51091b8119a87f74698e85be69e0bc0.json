{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/environment/curso/ejemplo-react/cliente/src/KeycloakLogin.js\";\nimport React, { Component } from 'react';\nimport Keycloak from \"keycloak-js\";\nimport decode from 'jwt-decode';\nimport JSONPretty from 'react-json-pretty';\nconst Config = {\n  // Mapa de JAVA\n  url: 'https://3.253.29.47:8443',\n  realm: 'prueba',\n  clientId: 'react',\n  redirect_uri: 'http://3.253.29.47:8085/',\n  onLoad: 'login-required'\n};\n\nclass KeycloakLogin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keycloak: null,\n      authenticated: false\n    }; // ^ Contiene la respuesta que nos da Keycloak cuando nos logueamos (TOKEN)\n    // ^ Contiene informaci贸n de la CONEXION a nuestro KEYCLOAK\n  }\n\n  componentDidMount() {\n    const keycloak = Keycloak(Config);\n    keycloak.init({\n      onLoad: \"login-required\",\n      promiseType: 'native'\n    }).then(authenticated => {\n      this.setState({\n        keycloak: keycloak,\n        authenticated: authenticated\n      });\n    });\n  }\n\n  render() {\n    if (this.state.keycloak && this.state.authenticated) {\n      return this.state.keycloak.token; //var jwt = JSON.stringify(decode(this.state.keycloak.token));\n      //return <div>\n      //            <JSONPretty id=\"json-pretty\" data={jwt}></JSONPretty>\n      //        </div>\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Esperando a login de KeyCloak\");\n    }\n  }\n\n}\n\nexport default KeycloakLogin; // Base64? Ni es un HASH ni es encripcion. ME asegura que un texto lo puedo represntarcon caracter BASICOS DE ASCII\n// Codificaci贸n: UTF8 ASCII,","map":{"version":3,"sources":["/home/ubuntu/environment/curso/ejemplo-react/cliente/src/KeycloakLogin.js"],"names":["React","Component","Keycloak","decode","JSONPretty","Config","url","realm","clientId","redirect_uri","onLoad","KeycloakLogin","constructor","props","state","keycloak","authenticated","componentDidMount","init","promiseType","then","setState","render","token"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,MAAMC,MAAM,GAAG;AAAE;AACbC,EAAAA,GAAG,EAAE,0BADM;AAEXC,EAAAA,KAAK,EAAE,QAFI;AAGXC,EAAAA,QAAQ,EAAE,OAHC;AAIXC,EAAAA,YAAY,EAAE,0BAJH;AAKXC,EAAAA,MAAM,EAAE;AALG,CAAf;;AAQA,MAAMC,aAAN,SAA4BV,SAA5B,CAAsC;AAElCW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,aAAa,EAAE;AAAjC,KAAb,CAFe,CAGc;AACjB;AACf;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMF,QAAQ,GAAGb,QAAQ,CAACG,MAAD,CAAzB;AACAU,IAAAA,QAAQ,CAACG,IAAT,CAAc;AAAER,MAAAA,MAAM,EAAE,gBAAV;AAA4BS,MAAAA,WAAW,EAAE;AAAzC,KAAd,EAAmEC,IAAnE,CAAwEJ,aAAa,IAAI;AACrF,WAAKK,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,QAAAA,aAAa,EAAEA;AAArC,OAAd;AACH,KAFD;AAGH;;AAEDM,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKR,KAAL,CAAWC,QAAX,IAAuB,KAAKD,KAAL,CAAWE,aAAtC,EAAsD;AAClD,aAAO,KAAKF,KAAL,CAAWC,QAAX,CAAoBQ,KAA3B,CADkD,CAElD;AACA;AACA;AACA;AACH,KAND,MAMO;AACH,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAP;AACH;AACJ;;AA1BiC;;AA8BtC,eAAeZ,aAAf,C,CAEA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport Keycloak from \"keycloak-js\"\nimport decode from 'jwt-decode'\nimport JSONPretty from 'react-json-pretty'\n\nconst Config = { // Mapa de JAVA\n    url: 'https://3.253.29.47:8443',\n    realm: 'prueba',\n    clientId: 'react',\n    redirect_uri: 'http://3.253.29.47:8085/',\n    onLoad: 'login-required'\n}\n\nclass KeycloakLogin extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { keycloak: null, authenticated: false };\n                                     // ^ Contiene la respuesta que nos da Keycloak cuando nos logueamos (TOKEN)\n                    // ^ Contiene informaci贸n de la CONEXION a nuestro KEYCLOAK\n    }\n\n    componentDidMount() {\n        const keycloak = Keycloak(Config);\n        keycloak.init({ onLoad: \"login-required\", promiseType: 'native' }).then(authenticated => {\n            this.setState({ keycloak: keycloak, authenticated: authenticated })\n        });\n    }\n\n    render() {\n        if (this.state.keycloak && this.state.authenticated ) {\n            return this.state.keycloak.token;\n            //var jwt = JSON.stringify(decode(this.state.keycloak.token));\n            //return <div>\n            //            <JSONPretty id=\"json-pretty\" data={jwt}></JSONPretty>\n            //        </div>\n        } else {\n            return <div>Esperando a login de KeyCloak</div>\n        }\n    }\n\n}\n\nexport default KeycloakLogin\n\n// Base64? Ni es un HASH ni es encripcion. ME asegura que un texto lo puedo represntarcon caracter BASICOS DE ASCII\n// Codificaci贸n: UTF8 ASCII, "]},"metadata":{},"sourceType":"module"}