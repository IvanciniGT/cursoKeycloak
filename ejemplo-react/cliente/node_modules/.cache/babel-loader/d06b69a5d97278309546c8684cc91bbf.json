{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/environment/curso/ejemplo-react/cliente/src/KeycloakLogin.js\";\nimport React, { Component } from 'react';\nimport Keycloak from \"keycloak-js\";\nimport decode from 'jwt-decode';\nimport JSONPretty from 'react-json-pretty';\nconst Config = {\n  // Mapa de JAVA\n  url: 'https://54.154.167.207:8443',\n  realm: 'prueba',\n  clientId: 'react',\n  onLoad: 'login-required',\n  scope: 'telefono'\n};\n\nclass KeycloakLogin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keycloak: null,\n      authenticated: false\n    }; // ^ Contiene la respuesta que nos da Keycloak cuando nos logueamos (TOKEN)\n    // ^ Contiene informaci贸n de la CONEXION a nuestro KEYCLOAK\n  }\n\n  componentDidMount() {\n    const keycloak = Keycloak(Config);\n    keycloak.init({\n      onLoad: 'login-required'\n    }).then(authenticated => {\n      this.setState({\n        keycloak: keycloak,\n        authenticated: authenticated\n      });\n      fetch(\"http://54.154.167.207:8086/test/admin\", {\n        headers: {\n          \"Authorization\": \"Bearer \" + keycloak.token\n        }\n      }).then(response => response.text()).then(text => console.log(text)).catch(error => console.log(error));\n      fetch(\"http://54.154.167.207:8086/test/user\", {\n        headers: {\n          \"Authorization\": \"Bearer \" + keycloak.token\n        }\n      }).then(response => response.text()).then(text => console.log(text)).catch(error => console.log(error));\n    });\n  }\n\n  render() {\n    if (this.state.keycloak && this.state.authenticated) {\n      var jwt = JSON.stringify(decode(this.state.keycloak.token));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(JSONPretty, {\n        id: \"json-pretty\",\n        data: jwt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          \"wordBreak\": \"break-all\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.state.keycloak.token));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Esperando a login de KeyCloak\");\n    }\n  }\n\n}\n\nexport default KeycloakLogin; // Base64? Ni es un HASH ni es encripcion. ME asegura que un texto lo puedo represntarcon caracter BASICOS DE ASCII\n// Codificaci贸n: UTF8 ASCII,","map":{"version":3,"sources":["/home/ubuntu/environment/curso/ejemplo-react/cliente/src/KeycloakLogin.js"],"names":["React","Component","Keycloak","decode","JSONPretty","Config","url","realm","clientId","onLoad","scope","KeycloakLogin","constructor","props","state","keycloak","authenticated","componentDidMount","init","then","setState","fetch","headers","token","response","text","console","log","catch","error","render","jwt","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,MAAMC,MAAM,GAAG;AAAE;AACbC,EAAAA,GAAG,EAAE,6BADM;AAEXC,EAAAA,KAAK,EAAE,QAFI;AAGXC,EAAAA,QAAQ,EAAE,OAHC;AAIXC,EAAAA,MAAM,EAAE,gBAJG;AAKXC,EAAAA,KAAK,EAAE;AALI,CAAf;;AAQA,MAAMC,aAAN,SAA4BV,SAA5B,CAAsC;AAElCW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,aAAa,EAAE;AAAjC,KAAb,CAFe,CAGc;AACjB;AACf;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMF,QAAQ,GAAGb,QAAQ,CAACG,MAAD,CAAzB;AACAU,IAAAA,QAAQ,CAACG,IAAT,CAAc;AAACT,MAAAA,MAAM,EAAE;AAAT,KAAd,EAA0CU,IAA1C,CAA+CH,aAAa,IAAI;AAC5D,WAAKI,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,QAAAA,aAAa,EAAEA;AAArC,OAAd;AAEAK,MAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC/CC,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAUP,QAAQ,CAACQ;AAD7B;AADsC,OAA1C,CAAL,CAICJ,IAJD,CAIOK,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJpB,EAKCN,IALD,CAKOM,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CALhB,EAMCG,KAND,CAMOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CANhB;AAQAR,MAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC9CC,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAUP,QAAQ,CAACQ;AAD7B;AADqC,OAAzC,CAAL,CAICJ,IAJD,CAIOK,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJpB,EAKCN,IALD,CAKOM,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CALhB,EAMCG,KAND,CAMOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CANhB;AAQH,KAnBD;AAoBH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKhB,KAAL,CAAWC,QAAX,IAAuB,KAAKD,KAAL,CAAWE,aAAtC,EAAsD;AAClD,UAAIe,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAe9B,MAAM,CAAC,KAAKW,KAAL,CAAWC,QAAX,CAAoBQ,KAArB,CAArB,CAAV;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AAAY,QAAA,EAAE,EAAC,aAAf;AAA6B,QAAA,IAAI,EAAEQ,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADL,EAIK;AAAK,QAAA,KAAK,EAAG;AAAC,uBAAa;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKjB,KAAL,CAAWC,QAAX,CAAoBQ,KADrB,CAJL,CAAP;AAQH,KAVD,MAUO;AACH,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAP;AACH;AACJ;;AA/CiC;;AAmDtC,eAAeZ,aAAf,C,CAEA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport Keycloak from \"keycloak-js\"\nimport decode from 'jwt-decode'\nimport JSONPretty from 'react-json-pretty'\n\nconst Config = { // Mapa de JAVA\n    url: 'https://54.154.167.207:8443',\n    realm: 'prueba',\n    clientId: 'react',\n    onLoad: 'login-required',\n    scope: 'telefono'\n}\n\nclass KeycloakLogin extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { keycloak: null, authenticated: false};\n                                     // ^ Contiene la respuesta que nos da Keycloak cuando nos logueamos (TOKEN)\n                    // ^ Contiene informaci贸n de la CONEXION a nuestro KEYCLOAK\n    }\n\n    componentDidMount() {\n        const keycloak = Keycloak(Config);\n        keycloak.init({onLoad: 'login-required'}).then(authenticated => {\n            this.setState({ keycloak: keycloak, authenticated: authenticated })\n            \n            fetch(\"http://54.154.167.207:8086/test/admin\", {\n            headers: {\n              \"Authorization\": \"Bearer \"+keycloak.token,\n            }})\n            .then((response) => response.text())\n            .then((text) => console.log(text))\n            .catch(error => console.log(error));\n            \n            fetch(\"http://54.154.167.207:8086/test/user\", {\n            headers: {\n              \"Authorization\": \"Bearer \"+keycloak.token,\n            }})\n            .then((response) => response.text())\n            .then((text) => console.log(text))\n            .catch(error => console.log(error));\n\n        });\n    }\n\n    render() {\n        if (this.state.keycloak && this.state.authenticated ) {\n            var jwt = JSON.stringify(decode(this.state.keycloak.token));\n            return <div>\n                        <div>\n                        <JSONPretty id=\"json-pretty\" data={jwt}></JSONPretty>\n                        </div>\n                        <div style={ {\"wordBreak\": \"break-all\"} }>\n                        {this.state.keycloak.token}\n                        </div>\n                    </div>\n        } else {\n            return <div>Esperando a login de KeyCloak</div>\n        }\n    }\n\n}\n\nexport default KeycloakLogin\n\n// Base64? Ni es un HASH ni es encripcion. ME asegura que un texto lo puedo represntarcon caracter BASICOS DE ASCII\n// Codificaci贸n: UTF8 ASCII, "]},"metadata":{},"sourceType":"module"}